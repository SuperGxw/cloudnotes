import{_ as s,c as a,a as n,o as e}from"./app-DlVXqZPT.js";const l={};function t(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h2 id="dockerfile命令" tabindex="-1"><a class="header-anchor" href="#dockerfile命令"><span>Dockerfile命令</span></a></h2><p>在 Docker 中，常使用 Dockerfile 来定义如何构建自己的 Docker 镜像。下述是一些常用的 Dockerfile 命令：</p><ul><li>FROM：指定基础镜像</li><li>LABEL：为镜像添加元数据标签</li><li>RUN：在镜像中执行命令</li><li>COPY：将文件或目录复制到镜像中</li><li>ADD：将文件添加到镜像中</li><li>ENV：设置环境变量</li><li>EXPOSE：指定运行容器时应监听的端口</li><li>ENTRYPOINT：定义容器启动时运行的命令</li><li>CMD：为容器提供默认运行命令</li><li>VOLUME：创建可被容器挂载的目录</li><li>USER：指定运行容器时的用户名或UID</li><li>WORKDIR：设置工作目录</li><li>ARG：定义一个变量，在docker build 时可以用 --build-arg 来赋值</li><li>ONBUILD：当一个被继承的Dockerfile中，将这个指令指定的命令作为指令执行</li><li>STOPSIGNAL：设置停止信号</li><li>HEALTHCHECK：设置健康检查</li><li>SHELL：设置SHELL命令</li><li>CREATED：设置构建时间</li></ul><h2 id="docker命令示例" tabindex="-1"><a class="header-anchor" href="#docker命令示例"><span>Docker命令示例</span></a></h2><p>Docker 是一种流行的容器化平台，下述是一些常用的 Docker 命令：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构建镜像 （注意末尾空格+.）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dockerfile</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [image_name] </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建并运行容器，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -it/d 用于指定容器的运行模式, -it: 以交互模式运行容器; -d: 以守护进程（后台）模式运行容器</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -p 在运行容器时将容器的端口映射到主机上</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># --name 用于指定容器的名称</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -v 挂载本地目录到 Docker 容器</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -rm 在退出 bash 会话后，Docker 会自动删除这个容器。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it/-d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8888:8888</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [container_name] -v /path/to/local/dir:/app/data </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">image_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启动 Jupyter Lab 时，使用 --ip=0.0.0.0 参数，使其绑定到所有接口，从而允许从外部访问</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">jupyter</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lab</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ip=0.0.0.0</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --no-browser</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --allow-root</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --port</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8888</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看本机已有镜像信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> images</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 查看容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除镜像</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rmi</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [image_name]/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">image_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 删除容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [container_name]/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">container_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在已运行的容器中执行命令，例如执行 Bash shell</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># exec: 在容器中执行新的命令，不会影响容器的当前会话</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># attach: 附加到容器的会话，可以与容器的当前会话进行交互</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec/attach</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [container_name]/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">container_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启动一个已停止的容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> start</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [container_name]/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">container_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 关闭正在运行的容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stop</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [container_name]/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">container_id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)]))}const h=s(l,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/zdhr4ufp/","title":"Dockerfile构建命令以及docker容器常用命令","lang":"zh-CN","frontmatter":{"title":"Dockerfile构建命令以及docker容器常用命令","createTime":"2024/09/28 16:40:29","permalink":"/article/zdhr4ufp/","description":"Dockerfile命令 在 Docker 中，常使用 Dockerfile 来定义如何构建自己的 Docker 镜像。下述是一些常用的 Dockerfile 命令： FROM：指定基础镜像 LABEL：为镜像添加元数据标签 RUN：在镜像中执行命令 COPY：将文件或目录复制到镜像中 ADD：将文件添加到镜像中 ENV：设置环境变量 EXPOSE：指...","head":[["meta",{"property":"og:url","content":"https://supergxw.github.io/cloudnotes/article/zdhr4ufp/"}],["meta",{"property":"og:site_name","content":"Super_GXW"}],["meta",{"property":"og:title","content":"Dockerfile构建命令以及docker容器常用命令"}],["meta",{"property":"og:description","content":"Dockerfile命令 在 Docker 中，常使用 Dockerfile 来定义如何构建自己的 Docker 镜像。下述是一些常用的 Dockerfile 命令： FROM：指定基础镜像 LABEL：为镜像添加元数据标签 RUN：在镜像中执行命令 COPY：将文件或目录复制到镜像中 ADD：将文件添加到镜像中 ENV：设置环境变量 EXPOSE：指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-02T11:34:37.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-02T11:34:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile构建命令以及docker容器常用命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-02T11:34:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Dockerfile命令","slug":"dockerfile命令","link":"#dockerfile命令","children":[]},{"level":2,"title":"Docker命令示例","slug":"docker命令示例","link":"#docker命令示例","children":[]}],"readingTime":{"minutes":1.98,"words":593},"git":{"createdTime":1748864077000,"updatedTime":1748864077000,"contributors":[{"name":"SuperGxw","email":"627215564@qq.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/demo/dockerfile.md","categoryList":[{"id":"4358b5","sort":10005,"name":"notes"},{"id":"c19f38","sort":10006,"name":"demo"}]}');export{h as comp,r as data};
