import{_ as s,c as a,a as n,o as t}from"./app-DlVXqZPT.js";const e="/cloudnotes/assets/blip_1-DUCNknwl.png",h="/cloudnotes/assets/blip_2-lrw1KNFV.png",l={};function k(p,i){return t(),a("div",null,i[0]||(i[0]=[n('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>根据遗忘曲线：如果没有记录和回顾，6天后便会忘记75%的内容</p><p>阅读笔记正是帮助你记录和回顾的工具，不必拘泥于形式，其核心是：记录、翻看、思考</p></div><div class="hint-container info"><p class="hint-container-title">信息</p><p>论文 <a href="https://arxiv.org/pdf/2201.12086" target="_blank" rel="noopener noreferrer">BLIP: Bootstrapping Language-Image Pre-training for Unified Vision-Language Understanding and Generation</a></p><p>代码 <a href="https://github.com/salesforce/BLIP" target="_blank" rel="noopener noreferrer">https://github.com/salesforce/BLIP</a></p><p>摘要: 本文提出了 BLIP，这是一种新的 VLP 框架，可灵活地转移到视觉语言理解和生成任务。BLIP 通过引导字幕有效地利用了嘈杂的网络数据，其中字幕制作者生成合成字幕，过滤器删除嘈杂的字幕。</p></div><h2 id="论文贡献" tabindex="-1"><a class="header-anchor" href="#论文贡献"><span>论文贡献</span></a></h2><blockquote><ol><li>编码器-解码器的多模态混合 (MED)：一种用于有效多任务预训练和灵活迁移学习的新模型架构。MED 可以作为单模态编码器、基于图像的文本编码器或基于图像的文本解码器运行。该模型与三个视觉语言目标联合进行预训练：图像文本对比学习、图像文本匹配和图像条件语言建模。</li></ol></blockquote><blockquote><ol start="2"><li>字幕和过滤 (CapFilt)：一种用于从嘈杂的图像文本对中学习的新数据集引导方法。将预训练的 MED 微调为两个模块：一个字幕生成器，用于根据网络图像生成合成字幕，以及一个过滤器，用于从原始网络文本和合成文本中删除嘈杂的字幕。</li></ol></blockquote><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="模型架构" tabindex="-1"><a class="header-anchor" href="#模型架构"><span>模型架构</span></a></h3><p><img src="'+e+`" alt="alt text"> 为了预先训练一个具有理解和生成能力的统一模型，本文提出了多模态编码器-解码器混合模型 (MED)，这是一种可以在以下三种功能之一中运行的多任务模型：</p><h4 id="单模态编码器" tabindex="-1"><a class="header-anchor" href="#单模态编码器"><span>单模态编码器</span></a></h4><p>单模态编码器，分别对图像和文本进行编码。文本编码器与 BERT 相同，其中 [CLS] 标记附加到文本输入的开头以总结句子。</p><h4 id="基于图像的文本编码器" tabindex="-1"><a class="header-anchor" href="#基于图像的文本编码器"><span>基于图像的文本编码器</span></a></h4><p>基于图像的文本编码器，通过在文本编码器的每个转换器块的自注意（SA）层和前馈网络（FFN）之间插入一个额外的交叉注意（CA）层来注入视觉信息。特定于任务的 [Encode] 标记附加到文本，并使用 [Encode] 的输出嵌入作为图像-文本对的多模态表示。</p><h4 id="基于图像的文本解码器" tabindex="-1"><a class="header-anchor" href="#基于图像的文本解码器"><span>基于图像的文本解码器</span></a></h4><p>基于图像的文本解码器，用因果自注意层替换基于图像的文本编码器中的双向自注意层。 [Decode] 标记用于表示序列的开始，而 wend-of-sequence 标记用于表示其结束。</p><h3 id="预训练目标" tabindex="-1"><a class="header-anchor" href="#预训练目标"><span>预训练目标</span></a></h3><p>在预训期间，联合优化了三个目标，包括两个基于理解的目标和一个基于生成的目标。每个图像-文本对只需要通过计算量更大的视觉转换器进行一次前向传递，并通过文本转换器进行三次前向传递，其中激活不同的功能来计算如下所示的三个损失。</p><h4 id="图像-文本对比损失-itc" tabindex="-1"><a class="header-anchor" href="#图像-文本对比损失-itc"><span>图像-文本对比损失（ITC）</span></a></h4><p>图像 encoder 分支采用 ViT 结构，文本 encoder 部分采用 BERT 结构，[CLS] token用来代表整个句子的特征。图像特征和文本特征进行对比损失，从而进行对齐操作。</p><p>ITC 图文对比任务，采用的标准的 InfoNCE loss。和 ALBEF 类似，BLIP 在 ITC 中，同样构建了队列，同样采用了 momentum 机制。相当于有两个 image encoder 和两个 text encoder，其中一个采用动量更新参数，并构建图像特征和文本特征，并存入队列中，从而增大对比损失时的负样本数量。</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sim_i2t </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> image_feat </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> text_feat_all </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">temp</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sim_t2i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> text_feat </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> image_feat_all </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">temp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">loss_i2t </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log_softmax</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sim_i2t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dim</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sim_i2t_targets</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dim</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">loss_t2i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log_softmax</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sim_t2i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dim</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sim_t2i_targets</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dim</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">loss_itc </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">loss_i2t </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> loss_t2i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_dequeue_and_enqueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">image_feat_m</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> text_feat_m</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图像-文本匹配损失-itm" tabindex="-1"><a class="header-anchor" href="#图像-文本匹配损失-itm"><span>图像-文本匹配损失（ITM）</span></a></h4><p>采用 image-grounded text encoder，具体结构也是 BERT，采用 cross-attention 来融合图像特征和文本特征，相当于一个多模态的 encoder，[Encode] token 用来代表多模态融合后的特征，最后在该特征后面增加一个 mlp 分类 head，区分图文是否匹配。</p><p>ITM 图文匹配任务，是一个二分类任务。和 ALBEF 类似，正样本对就是同时输入的图像和文本，而负样本是利用上面的图文对比相似任务中的相似度进行采样挖掘而来。正样本对和负样本对分别经过多模态 encoder，再经过一个线性分类 head，最终获得分类得分。采用交叉熵损失函数进行训练。</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">vl_embeddings </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                output_pos</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">last_hidden_state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[:,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :],</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                output_neg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">last_hidden_state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[:,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :],</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dim</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itm_logits </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itm_head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">vl_embeddings</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itm_labels </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ones</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">bs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dtype</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">long</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">zeros</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> bs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> dtype</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">torch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">long</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">dim</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">to</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">device</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">loss_itm </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cross_entropy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">itm_logits</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> itm_labels</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="语言模型损失-lm" tabindex="-1"><a class="header-anchor" href="#语言模型损失-lm"><span>语言模型损失（LM）</span></a></h4><p>采用 image-grounded text decoder，用 causal self-attention 来编码图像特征和文本特征。与 BERT 的 mask 机制不同，这里 causal self-attention 是一种序列注意力机制，相当于预测接下来的语句。[Decode] token 被用来表示句子的开头。因此该语言模型任务能够为图像生成一段话 caption，为后续的 captioner、filter 机制奠定基础。</p><p>LM语言模型任务，是一个序列生成任务。输入图像特征和语句开始token，然后序列化生成语句。该语句可以认为是图像的caption。</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">decoder_output </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">text_decoder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            decoder_input_ids</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            attention_mask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">text</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">attention_mask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            encoder_hidden_states</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">image_embeds</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            encoder_attention_mask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">image_atts</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            labels</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">decoder_targets</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            return_dict</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">True</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">loss_lm </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> decoder_output</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">loss</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="capfilt" tabindex="-1"><a class="header-anchor" href="#capfilt"><span>CapFilt</span></a></h3><p>进一步，为了提升对数据噪声的鲁棒性，BLIP 采用了一种 Captioning and Filtering (CapFilt) 的机制，和ALBEF 的蒸馏方法不同。该机制充分利用两点：一是 BLIP 中的 image-grounded text encoder 和image-grounded text decoder，两个结构可以过滤图文对和生成图像的描述文本，而文本又可以和图像组成一个图文匹配对；二是利用高质量的人类标注的图文对数据集来进行模型训练监督，从而获得更加可靠的 BLIP 预训练模型，为图像生成更加可靠的文本。有了这两点，似乎可以循环利用这两步，从而不断提高模型效果。 <img src="`+h+'" alt="alt text"></p><h3 id="训练流程" tabindex="-1"><a class="header-anchor" href="#训练流程"><span>训练流程</span></a></h3><ul><li>利用网络上获取的图文对和人工标注好的图文对，对 BLIP 网络进行预训练，获得一个基础版本的多模态混合encoder-decoder 模型。</li><li>利用ITC和ITM任务，在人工标注的高质量图文对上，对 BLIP 的 image-grounded text encoder 进行finetune，获得一个高置信度的 Filter。</li><li>然后利用 LM 任务，在人工标注的高质量图文对上，对 BLIP 的 image-grounded text decoder 进行finetune，获得一个高质量的 Captioner。</li><li>然后针对网络获取的图文对中的图片进行 captioning 操作，获取描述文本，与图片组成一个图文对。将该图文对和网络获取的图文对一起送进 filter 中，获取过滤成功的图文对。</li><li>最后将过滤成功的图文对，和人工标注的高质量图文对组成一个全新的数据集，利用该数据集对 BLIP 进行预训练，获得更加高质量的图文预训练模型。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文提出了 BLIP，一种新的 VLP 框架，在包括基于理解和基于生成的任务在内的各种下游视觉语言任务上具有最先进的性能。BLIP 使用从大规模嘈杂图像文本对引导的数据集，通过注入不同的合成字幕并删除嘈杂字幕，对多模态编码器-解码器模型进行预训练。我们发布了引导数据集，以促进未来的视觉语言研究。</p><p>另外，有几个潜在的方向可以进一步提高 BLIP 的性能：</p><ul><li>（1）多轮数据集引导；</li><li>（2）为每个图像生成多个合成字幕，以进一步扩大预训练语料库；</li><li>（3）通过训练多个不同的字幕制作者和过滤器并在 CapFilt 中结合它们的力量来模型集成。</li></ul>',36)]))}const r=s(l,[["render",k],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/article/9enpfp4n/","title":"BLIP：统一的视觉语言理解和生成","lang":"zh-CN","frontmatter":{"title":"BLIP：统一的视觉语言理解和生成","tags":["多模态","大语言模型","预训练"],"createTime":"2024/10/14 22:09:07","permalink":"/article/9enpfp4n/","description":"提示 根据遗忘曲线：如果没有记录和回顾，6天后便会忘记75%的内容 阅读笔记正是帮助你记录和回顾的工具，不必拘泥于形式，其核心是：记录、翻看、思考 信息 论文 BLIP: Bootstrapping Language-Image Pre-training for Unified Vision-Language Understanding and Gen...","head":[["meta",{"property":"og:url","content":"https://supergxw.github.io/cloudnotes/article/9enpfp4n/"}],["meta",{"property":"og:site_name","content":"Super_GXW"}],["meta",{"property":"og:title","content":"BLIP：统一的视觉语言理解和生成"}],["meta",{"property":"og:description","content":"提示 根据遗忘曲线：如果没有记录和回顾，6天后便会忘记75%的内容 阅读笔记正是帮助你记录和回顾的工具，不必拘泥于形式，其核心是：记录、翻看、思考 信息 论文 BLIP: Bootstrapping Language-Image Pre-training for Unified Vision-Language Understanding and Gen..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-02T11:34:37.000Z"}],["meta",{"property":"article:tag","content":"多模态"}],["meta",{"property":"article:tag","content":"大语言模型"}],["meta",{"property":"article:tag","content":"预训练"}],["meta",{"property":"article:modified_time","content":"2025-06-02T11:34:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BLIP：统一的视觉语言理解和生成\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-02T11:34:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"论文贡献","slug":"论文贡献","link":"#论文贡献","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"模型架构","slug":"模型架构","link":"#模型架构","children":[]},{"level":3,"title":"预训练目标","slug":"预训练目标","link":"#预训练目标","children":[]},{"level":3,"title":"CapFilt","slug":"capfilt","link":"#capfilt","children":[]},{"level":3,"title":"训练流程","slug":"训练流程","link":"#训练流程","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":6.98,"words":2095},"git":{"createdTime":1748864077000,"updatedTime":1748864077000,"contributors":[{"name":"SuperGxw","email":"627215564@qq.com","commits":1}]},"autoDesc":true,"filePathRelative":"mllm/blip.md","categoryList":[{"id":"2a0b20","sort":10002,"name":"mllm"}]}');export{r as comp,g as data};
